// ================================================================================ ключи (key) для Objekt ==================================================================================
// Итого
// Объекты – это ассоциативные массивы с рядом дополнительных возможностей. Они хранят свойства (пары ключ-значение), где:
// • Ключи свойств должны быть строками или символами (обычно строками).
// • Значения могут быть любого типа.
// Чтобы получить доступ к свойству, мы можем использовать:
// • Запись через точку: obj.property.
// • Квадратные скобки obj["property"]. Квадратные скобки позволяют взять ключ из переменной, например, obj[varWithKey].
// Дополнительные операторы:
// • Удаление свойства: delete obj.prop.
// • Проверка существования свойства: "key" in obj.
// • Перебор свойств объекта: цикл for... in for (let key in obj)

let user = {
    first_name: "John",
    last_name: "Smith",
    age: 20,
    gender:"Male"
};
// ==== ключи ====
for (let key in user){
   console.log(key);// возврашает Consol -> first_name, last_name, age, gender
   console.log(user[key]); // возврашает Consol -> John, Smith, 20, Male
   // указанно оба варианта: first_name
                          // John
                          // last_name
                          // Smith
                          // age
                          // 20
                          // gender
                          // Male
};

// =========== Practice 1 ==============

// У нас есть объект, в котором хранятся зарплаты нашей команды:
let salaries = {
    John: 100,
    Ann: 160,
    Pete: 130
};
// Напишите код для суммирования всех зарплат и сохраните результат в переменной sum.
let sum = 0;

for (let key in salaries) {
    sum += salaries[key];
}
console.log("Cyммa зарплат всей комманды: "+sum); // Выведет Consol -> сумму зарплат всей комманды: 390 

// =========== Practice 2 ==============
// Написать код, выполнив задание:
// -> если значение объекта является числом (number), 
// -> то его значение надо увеличить вдвое.

// Пример объекта:
//    let menu = {
//        width: 200, 
//        height: 300,
//        title: "my menu"
//    };

// Результат Consol: {width: 400, height: 600, title: 'my menu'}
//    let menu = {
//        width: 400, 
//        height: 600,
//        title: "my menu"
//    };

let menu = {
    width: 200,
    height: 300,
    title: "my menu"
};

for (let key in menu) {
    if (typeof (menu[key]) === 'number') { // Выводит число (с помощью typeof) и проверяет является значение обекта числом 
        // menu[key] = menu[key] * 2;
        menu[key] *= 2; // Увеличиваем значение вдвое
    }
}
console.log(menu); 

// =========================================================================== Вывод несколько свойст из разных частей  ==================================================================================
let users = [
    {
        name: "Bob",
        surname: "Brown",
        age: 20
    },
    {
        name: "John",
        surname: "Smith",
        age: 18
    },
    {
        name: "Lily",
        surname: "Hardy",
        age: 32
    }
];
for (let i= 0; i < users.length; i++) {
    console.log(users[i].age);  // Вывод Consol: 20, 18, 32  (все age -> всех users )
};

// // =========== Practice 1 ==============
// В следующих задачах будет использоваться массив из объектов, каждый из которых описывает определенный товар. 
// Пример массива

let arr = [
    {
    id: 1,
    title: "bicycle",
    price: 45000,
    discount: 10
    },
    {
    id: 2,
    title: "roller-skates",
    price: 15000,
    discount: 5
    },
    {
    id: 3,
    title: "Kick scooter",
    price: 10000,
    discount: 30
    },
    {
    id: 4,
    title: "skis",
    price: 25000,
    discount: 20
    },
    {
    id: 5,
    title: "skate",
    price: 10000,
    discount: 0
}
];
// === 1. ===
// Написать цикл, который выводит только названия товаров.
for (let i= 0; i < arr.length; i++) {
    console.log("1. " +arr[i].title);  // Вывод Consol: title: "bicycle", "roller-skates", "Kick scooter", "skis", "skate"
};
// === 2. ===
// Написать цикл, который выводит для каждого товара строку по маске “<название> + (<цена>)”
for(let i=0; i<arr.length; i++){
    console.log("2. "+ `${arr[i].title} (${arr[i].price})`); // ``-> интерпаляция
}; 
// === 3. ===
// Написать цикл, который выводит для каждого товара строку по маске “<название> + (<цена со скидкой>)”
// price - price*discount/100
for(let i=0; i<arr.length; i++){
    if(arr[i].discount === 0){
        console.log(`${arr[i].title} (${arr[i].price})`); // без скидки -> просто ценна 
    }
    else{
        console.log(`${arr[i].title} (${arr[i].price - arr[i].price*arr[i].discount/100})`);
    }
};

// ===================================================================================== funktion  ============================================================================================
// Функции
// Зачастую нам надо повторять одно и то же действие во многих частях программы.
// Например, необходимо красиво вывести сообщение при приветствии посетителя, при выходе посетителя с сайта, ещё где-нибудь.
// Чтобы не повторять один и тот же код во многих местах, придуманы функции. Функции являются основными «строительными блоками» программы.
// Примеры встроенных функций вы уже видели – это console.log(message), prompt(message, default) и alert(message). Но можно создавать и свои.


// function function_name (parameter1, parameter2){
//     funktion body;
// }
// function_name(arg1,arg2);
// !!! funktion игнорирует компелятор(Consol) без -> function_name(arg1,arg2); 
// (можно вызвать до и после обозначение, но лутчше внизу!, чтобы иметь дорступ ко всем гглобальнным переменнах)

// === 1. ===
let first_name = "Hard "; // глобальнная переменная (доступ в не функции и внутри функции)

function showMessage() {
    let user_name = "Lily " // локальная переменная (работает только внутри этой функции)
    console.log("1. "+ "Hello "+ user_name + first_name);
};
showMessage(); // Consol: Hello Lily Hard

// === 2. ===
// преорететность ввыше у локального 
let user_name = "Tom";

function showMessage1() {
    let user_name = "Lily " 
    console.log("2. "+"Hello "+ user_name);
};
showMessage1(); // -> Consol: Hello Lily

// === 3. ===
function showMessage2(user) {
    console.log("3. "+"Hello "+ user);
};
showMessage2('Mary');
showMessage2('Tera');
showMessage2(prompt('enter your name'));
showMessage2(); // Consol: Hello undefined

// Параметр – это переменная, указанная в круглых скобках в объявлении функции.
// Аргумент – это значение, которое передаётся функции при её вызове.

// === 4. default ===
function showMessage3(user='user name') {
    console.log("4. "+"Hello "+ user);
};
showMessage3(''); // Consol -> Hello 
showMessage3('Anna');

// ========================================================================= основнные префексы для обозначения функции ===========================================================

// showMessage(..) -> показывает сообщение
// getAge(..) -> возвращает возраст (получая его каким-то образом)
// calcSum(..) -> вычисляет сумму и возвращает результат
// createForm(..) -> создаёт форму (и обычно возвращает её)
// checkPermission(..) -> проверяет доступ, возвращая true/false

// Благодаря префиксам, при первом взгляде на имя функции становится понятным, 
// что делает её код, и какое значение она может возвращать.

// Одна функция – одно действие
// Функция должна делать только то, что явно подразумевается её названием. И это должно быть одним действием.
// Несколько примеров, которые нарушают это правило:
// • getAge – будет плохим выбором, если функция будет выводить console.log с возрастом (должна только возвращать его).
// • createForm – будет плохим выбором, если функция будет изменять документ, 
// добавляя форму в него (должна только создавать форму и возвращать её).
// • checkPermission – будет плохим выбором, если функция будет отображать 
// сообщение с текстом доступ разрешён/запрещён (должна только выполнять проверку и возвращать её результат).


// Передаваемые значения копируются в параметры функции и становятся локальными переменными.
// • Функции имеют доступ к внешним переменным. Но это работает только изнутри наружу. Код вне функции не
// имеет доступа к её локальным переменным.
// • Функция может возвращать значение. Если этого не происходит, тогда результат равен undefined.
// Для того, чтобы сделать код более чистым и понятным, рекомендуется использовать локальные переменные 
// и параметры функций, не пользоваться внешними переменными.
// Функция, которая получает параметры, работает с ними и затем возвращает результат, гораздо понятнее функции, 
// вызываемой без параметров, но изменяющей внешние переменные, что чревато побочными эффектами.
// Именование функций:
// • Имя функции должно понятно и чётко отражать, что она делает. Увидев её вызов в коде, вы должны тут же понимать, что она делает, и что возвращает.
// • Функция – это действие, поэтому её имя обычно является глаголом.
// • Есть много общепринятых префиксов, таких как: create..., show..., get..., check... и т.д. Пользуйтесь ими как подсказками, поясняющими, что делает функция.

// ===================================================================================== возврат функции =========================================================================
function getSum(a=0, b=0) {
    return a+b;
};
// getSum(2, 5); -> не правельно нечего невыдаст
// компелятор(Consol) видет только когда  
// 1. мы пресваеваем значение result 
// или 
// 2. вызываем сразу в console.log результат функции для вывода getSum(10, 45)  

// === 1. ===
let result = getSum(2, 5); 
console.log("1. "+result); // Consol -> 7

// === 2.===
console.log("2. "+getSum(10, 45)); // Consol -> 55


function getSum1(num1, num2) {
    let sum = num1 + num2;
    return sum; // выход из цыкла
    // console.log(sum); -> ignored, игнорируется после  return, так-как цыкл был завершон
};

// ============================================================= в нутри функции могут быть несколько return в случии (if-else) ============================================================

// === 1. ===
function getMax(num1, num2) {
    if (num1>num2) {
        return num1;
    }
    else{
        return num2;
    }
};
console.log("1. "+getMax(20, 14));

// === 2. ===
// короче код без else, тоже функционирует, 
// так-как если в первом случие num1 не верно (false) -> завершится и перейдёт к num2 и завершится
// (true)-> выполнится
function getMax(num1, num2) {
    if (num1>num2) {
        return num1;
    }
    return num2;
};
console.log("2. "+getMax(2, 12));



// =========== Practice 1 ==============
// Задача: Oбъявить функцию, который считает значение через prompt и выводит "да"  если число четнаe
//  и "нет" в ином случае. ( если число делится на 2 без остатка)
function showEvenOrOdd() {
    let number = Number(prompt('enter the number'));
    if (number%2===0) { // деление % числа без остатка 
        console.log("Yes");
    }
    else{
        console.log("No");
    }
};
showEvenOrOdd();



// =========== Practice 2 ==============
// Написать функцию, которая принимает 2 числа и возвращает  
// -> 1, если первое число больше, чем второе 
// -> -1,  если первое число меньше, чем второе, 
// и 0, -> если числа равны

function getMaxOrMin(a, b) {
    if (a>b) { // первое число больше, чем второе
        return 1;
    }
    else if (b>a){ // первое число меньше, чем второе
        return -1;
    }
    else { // -> если числа равны
        return 0;
    }
};
console.log("1.первое число больше, чем второе: "+getMaxOrMin(10, 5));
console.log("2.первое число меньше, чем второе: "+getMaxOrMin(4, 8));
console.log("3.числа равны: "+getMaxOrMin(10, 10));



// =========== Practice 3 ==============
// Описать функцию, которая получает в качестве аргумента число
// и возвращает массив из чиссел от 0 до указанного числа.

function getArray(n) {
    let newArray = [];
    
    for (let i=0; i<n; i++) {
        newArray.push(i);
    }
    return newArray;
};
console.log(getArray(6)); // -> Consol: (6) [0, 1, 2, 3, 4, 5]



// =========== Practice 4 ==============
// Напишите функцию, которая в качестве аргументов получает два числа 
// и возвращает массив часел 
// значениями от большего числа к меньшему. >
function getArray1(a, b) {
    let max;
    let min;
    let newArray1 = [];

    if (a>b) { 
        max = a;
        min = b;
    }
    else if (b>a){ 
        max = b;
        min = a;
    }
    else { 
        return 0;
    }

    for (let i=max; i>min; i--) { // от большего числа к меньшему
        newArray1.push(i);  // заполнение массива[] числами
    }

    return newArray1;
};
console.log(getArray1(20, 4)); // Consol: (16) [20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5]
console.log(getArray1(10, 20)); // Consol: (10) [20, 19, 18, 17, 16, 15, 14, 13, 12, 11]
console.log(getArray1(10, 10)); // Consol: 0


// или 2.Вариант
 function getArray2(a, b) {
     let newArray2 = [];
    
     if (a>b) {
         for (let i=a; i>b; i--) {
             newArray2.push(i);
         }
     }
     else if (b>a){ 
         for (let i=b; i>a; i--) {
             newArray2.push(i);
         }
     }
     else { 
         return 0;
     }
     return newArray2;
};
 console.log(getArray2(12, 5)); // Consol: (16) [20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5]
 console.log(getArray2(10, 20)); // Consol: (10) [20, 19, 18, 17, 16, 15, 14, 13, 12, 11]
 console.log(getArray2(10, 10)); // Consol: 0


